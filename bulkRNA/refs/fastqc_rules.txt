

		expand(rawQCDir + "{sample}_L001_R1_001_fastqc.html", sample = config["allSamples"]),
		expand(rawQCDir + "{sample}_L001_R2_001_fastqc.html", sample = config["allSamples"]),
		expand(rawQCDir + "{sample}_L002_R1_001_fastqc.html", sample = config["allSamples"]),
		expand(rawQCDir + "{sample}_L002_R2_001_fastqc.html", sample = config["allSamples"]),
		expand(rawQCDir + "{sample}_L003_R1_001_fastqc.html", sample = config["allSamples"]),
		expand(rawQCDir + "{sample}_L003_R2_001_fastqc.html", sample = config["allSamples"]),
		expand(rawQCDir + "{sample}_L004_R1_001_fastqc.html", sample = config["allSamples"]),
		expand(rawQCDir + "{sample}_L004_R2_001_fastqc.html", sample = config["allSamples"]),
				expand(trimmedQCDir + "{sample}_L001_R1_trim_fastqc.html", sample = config["allSamples"]),
		expand(trimmedQCDir + "{sample}_L001_R2_trim_fastqc.html", sample = config["allSamples"]),
		expand(trimmedQCDir + "{sample}_L002_R1_trim_fastqc.html", sample = config["allSamples"]),
		expand(trimmedQCDir + "{sample}_L002_R2_trim_fastqc.html", sample = config["allSamples"]),
		expand(trimmedQCDir + "{sample}_L003_R1_trim_fastqc.html", sample = config["allSamples"]),
		expand(trimmedQCDir + "{sample}_L003_R2_trim_fastqc.html", sample = config["allSamples"]),
		expand(trimmedQCDir + "{sample}_L004_R1_trim_fastqc.html", sample = config["allSamples"]),
		expand(trimmedQCDir + "{sample}_L004_R2_trim_fastqc.html", sample = config["allSamples"]),



# RAW FASTQC
#-----------------------------------------------------------------------------------------
rule raw_fastqc:
	input:
		L1R1 = lambda wildcards: rawReadsDir + config[wildcards.sample]["lane1read1"] + "_001.fastq.gz",
		L1R2 = lambda wildcards: rawReadsDir + config[wildcards.sample]["lane1read2"] + "_001.fastq.gz",
		L2R1 = lambda wildcards: rawReadsDir + config[wildcards.sample]["lane2read1"] + "_001.fastq.gz",
		L2R2 = lambda wildcards: rawReadsDir + config[wildcards.sample]["lane2read2"] + "_001.fastq.gz",
		L3R1 = lambda wildcards: rawReadsDir + config[wildcards.sample]["lane3read1"] + "_001.fastq.gz",
		L3R2 = lambda wildcards: rawReadsDir + config[wildcards.sample]["lane3read2"] + "_001.fastq.gz",
		L4R1 = lambda wildcards: rawReadsDir + config[wildcards.sample]["lane4read1"] + "_001.fastq.gz",
		L4R2 = lambda wildcards: rawReadsDir + config[wildcards.sample]["lane4read2"] + "_001.fastq.gz"
	output:
		html1 = rawQCDir + "{sample}_L001_R1_001_fastqc.html",
		html2 = rawQCDir + "{sample}_L001_R2_001_fastqc.html",
		html3 = rawQCDir + "{sample}_L002_R1_001_fastqc.html",
		html4 = rawQCDir + "{sample}_L002_R2_001_fastqc.html",
		html5 = rawQCDir + "{sample}_L003_R1_001_fastqc.html",
		html6 = rawQCDir + "{sample}_L003_R2_001_fastqc.html",
		html7 = rawQCDir + "{sample}_L004_R1_001_fastqc.html",
		html8 = rawQCDir + "{sample}_L004_R2_001_fastqc.html"
	params:
		outDir = rawQCDir,
		threads = config["threads"]
	shell:
		"""
		fastqc {input.L1R1} --outdir {params.outDir} --threads {params.threads};
		fastqc {input.L2R2} --outdir {params.outDir} --threads {params.threads};
		fastqc {input.L2R1} --outdir {params.outDir} --threads {params.threads};
		fastqc {input.L2R2} --outdir {params.outDir} --threads {params.threads};
		fastqc {input.L3R1} --outdir {params.outDir} --threads {params.threads};
		fastqc {input.L3R2} --outdir {params.outDir} --threads {params.threads};
		fastqc {input.L4R1} --outdir {params.outDir} --threads {params.threads};
		fastqc {input.L4R2} --outdir {params.outDir} --threads {params.threads};
		"""
		

# TRIMMED FASTQC
#-----------------------------------------------------------------------------------------
rule trimmed_fastqc:
	input:
		trimL1R1 = trimmedReadsDir + "{sample}_L001_R1_trim.fastq.gz",
		trimL1R2 = trimmedReadsDir + "{sample}_L001_R2_trim.fastq.gz",
		trimL2R1 = trimmedReadsDir + "{sample}_L002_R1_trim.fastq.gz",
		trimL2R2 = trimmedReadsDir + "{sample}_L002_R2_trim.fastq.gz",
		trimL3R1 = trimmedReadsDir + "{sample}_L003_R1_trim.fastq.gz",
		trimL3R2 = trimmedReadsDir + "{sample}_L003_R2_trim.fastq.gz",
		trimL4R1 = trimmedReadsDir + "{sample}_L004_R1_trim.fastq.gz",
		trimL4R2 = trimmedReadsDir + "{sample}_L004_R2_trim.fastq.gz"
	output:
		html1 = trimmedQCDir + "{sample}_L001_R1_trim_fastqc.html",
		html2 = trimmedQCDir + "{sample}_L001_R2_trim_fastqc.html",
		html3 = trimmedQCDir + "{sample}_L002_R1_trim_fastqc.html",
		html4 = trimmedQCDir + "{sample}_L002_R2_trim_fastqc.html",
		html5 = trimmedQCDir + "{sample}_L003_R1_trim_fastqc.html",
		html6 = trimmedQCDir + "{sample}_L003_R2_trim_fastqc.html",
		html7 = trimmedQCDir + "{sample}_L004_R1_trim_fastqc.html",
		html8 = trimmedQCDir + "{sample}_L004_R2_trim_fastqc.html"
	params:
		outDir = trimmedQCDir,
		threads = config["threads"]
	shell:
		"""
		fastqc {input.trimL1R1} --outdir {params.outDir} --threads {params.threads};
		fastqc {input.trimL1R2} --outdir {params.outDir} --threads {params.threads};
		fastqc {input.trimL2R1} --outdir {params.outDir} --threads {params.threads};
		fastqc {input.trimL2R2} --outdir {params.outDir} --threads {params.threads};
		fastqc {input.trimL3R1} --outdir {params.outDir} --threads {params.threads};
		fastqc {input.trimL3R2} --outdir {params.outDir} --threads {params.threads};
		fastqc {input.trimL4R1} --outdir {params.outDir} --threads {params.threads};
		fastqc {input.trimL4R2} --outdir {params.outDir} --threads {params.threads};
		"""
		
		
		
